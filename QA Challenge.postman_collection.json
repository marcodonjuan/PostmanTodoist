{
	"info": {
		"_postman_id": "c9bff530-b9da-479c-a7e5-e47ef3b41ab7",
		"name": "QA Challenge",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Projects",
			"item": [
				{
					"name": "Get All Projects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate JSON schema\", function () {",
									"    const responseSchema = {",
									"    \"properties\": {",
									"        \"name\": {",
									"            \"type\": \"string\"",
									"        },",
									"        \"completed\": {",
									"            \"type\": \"boolean\"",
									"        }",
									"    }",
									"    };",
									"    pm.response.to.have.jsonSchema(responseSchema);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/projects",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Project",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ProjectName\", \"Project Test\");",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"PID\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate Project Id value\", function () {",
									"    ",
									"    pm.expect(jsonData.id.toString()).to.equal(pm.environment.get('PID'))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{ProjectName}}\"\n}"
						},
						"url": {
							"raw": "{{URL}}/projects",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create New Project Negative",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									"pm.test(\"Verify error message\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Name must be provided for the project creation\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"\"}"
						},
						"url": {
							"raw": "{{URL}}/projects",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"PID\", jsonData.id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate Requested Project Id value\", function () {",
									"        pm.expect(jsonData.id.toString()).to.equal(pm.environment.get('PID'))",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/projects/{{PID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"{{PID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get a Project Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Verify status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test(\"Verify error message\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Not found\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/projects/123",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"123"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-Id",
								"value": "$(uuidgen)",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Project Updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/projects/{{PID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"{{PID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Project Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code  404\", function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test(\"Verify error message\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Project not found\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "X-Request-Id",
								"value": "$(uuidgen)",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Project Updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/projects/145",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"145"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Project",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/projects/{{PID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"projects",
								"{{PID}}"
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Tasks",
			"item": [
				{
					"name": "Get All Tasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{URL}}/tasks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Tasks Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Verify status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"})",
									"",
									"pm.test(\"Verify error message - Page not found\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"404 page not found\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"postman.setEnvironmentVariable(\"TID\", jsonData.id);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.test(\"Validate Task Id value\", function () {",
									"        pm.expect(jsonData.id.toString()).to.equal(pm.environment.get('TID'))",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"Test create new task\",\n    \"due_string\": \"tomorrow at 12:00\",\n    \"due_lang\": \"en\",\n    \"priority\": 4\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/tasks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Task Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									"pm.test(\"Verify error message - Empty Content\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Empty content\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"\",\n    \"due_string\": \"tomorrow at 12:00\",\n    \"due_lang\": \"en\",\n    \"priority\": 4\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/tasks",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Active task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);",
									"",
									"postman.setEnvironmentVariable(\"taskStatus\", jsonData.completed);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Validate Task status is not completed\", function () {",
									"    pm.expect(jsonData.completed).eql(false)",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/{{TID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"{{TID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get an Active task Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"",
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/{{TID}}/close",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"{{TID}}",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Close Task Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify error message - Invalid ID\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Invalid id\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/0/close",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"0",
								"close"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reopen Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/{{TID}}/reopen",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"{{TID}}",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reopen Task Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify error message - Item not found\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Item not found\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/1/reopen",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"1",
								"reopen"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"content\": \"Test update a task\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/tasks/{{TID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"{{TID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Task Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"pm.test(\"Verify error message - At least one of the supported fields should be set and non-empty\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"At least one of supported fields should be set and non-empty\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"content\": \"\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/tasks/{{TID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"{{TID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/{{TID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"{{TID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Task Negative",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Verify status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"})",
									"",
									"pm.test(\"Verify error message - Item not found\", function () { ",
									"    pm.expect(pm.response.text()).to.include(\"Item not found\"); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/tasks/1",
							"host": [
								"{{URL}}"
							],
							"path": [
								"tasks",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "projectId",
			"value": ""
		}
	]
}